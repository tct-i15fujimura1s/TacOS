/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2018 - 2019 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * sio/sio.cmm : シリアルドライバ
 *
 * 2019.09.25 : 複数文字の入力をするように変更、cookedモードを追加
 * 2019.03.01 : RN4020との接続情報をIPLから引き継ぐように変更(RN4020-RAM使用)
 * 2019.01.24 : RN4020とFT232両方に入出力するように変更
 * 2018.12.25 : 出力でLFをCR,LFに置き換える機能追加
 * 2018.11.01 : 新規
 *
 * $Id$
 *
 */

#include <util.hmm>
#include <kernel.hmm>
#include "sio.hmm"

#define SIO_Data 0x08                         // FT232 送受信データのI/Oポート
#define SIO_Ctrl 0x0a                         // FT232 制御用のI/Oポート
#define RN4_Data 0x28                         // RN4020 送受信データのI/Oポート
#define RN4_Ctrl 0x2a                         // RN4020 制御用のI/Oポート

RingBuf rcvBuf={"12345678901234567890123456789012345678901234567890123456789012345678901234567890",80,0,0,0}; // 受信バッファ
RingBuf trsBuf={"12345678901234567890123456789012345678901234567890123456789012345678901234567890",80,0,0,0}; // 送信バッファ

// RN4020
boolean mldpOn;

// 送信関係
boolean trsIdle=true;                         // トランスミッタがアイドル状態
boolean trsWait=false;                        // 送信待ちプロセスがある
int trsSem;                                   // 送信待ち用のセマフォ

// 入出力の設定
boolean cooked=true;                          // 前処理をする
boolean echoBack=true;                        // エコーバックをする

// SIO 送信割込み処理ルーチン
interrupt sioTrs() {
  if (ISEmpty(trsBuf)) {                      // 送信すべきデータがないなら
    out(SIO_Ctrl,0x0040);                     //   送信割込み禁止
    trsIdle = true;                           //     トランスミッタはアイドルに
  } else {                                    // 送信すべきデータがあれば
    int c = getBuf(trsBuf);                   //   次の文字をバッファから取出し
    out(SIO_Data,c);                          //     送信する
    if (mldpOn) out(RN4_Data,c);              //     同じデータをRN4020にも送信
    if (trsWait) {                            //   待っているプロセスがあれば
      trsWait=false;                          //     フラグを下ろして
      semV(trsSem);                           //        起こす
    }
  }
}

// SIO へ１文字出力
void put(char c) {
  int r=setPri(DI|KERN);                      // SIO割り込みが発生しないように
  if (trsIdle) {                              // トランスミッタがアイドルなら
    out(SIO_Data,ord(c));                     //   送信を開始する
    out(SIO_Ctrl,0x00c0);                     //   割込みを許可する
    if (mldpOn) out(RN4_Data,ord(c));         //   同じデータをRN4020にも送信
    trsIdle = false;                          //   トランスミッタは動作中
  } else {                                    // トランスミッタが動作中なら
    if (ISFull(trsBuf)) {                     //   送信バッファに空きが無いなら
      trsWait=true;                           //     フラグを立てて
      semP(trsSem);                           //       空きができるのを待つ
    }
    putBuf(trsBuf, c);                        //     送信バッファに１文字追加
  }
  setPri(r);
}

public int putSIO(char[] buf, int len) {
  int count;
  for (count=0; count<len; count=count+1) {
    char c = buf[count];
    if (cooked) {
      if (c=='\n') put('\r');                 // LF => CR+LF 変換
    }
    put(c);
  }
  return count;
}

// 受信関係
int rcvSem;                                   // 受信待ちセマフォ
int reqLen=0;                                 // conReadで要求された長さ (0:conRead中ではない)

// メッセージの一致を調べる FSM
int mldpCnt=0;
boolean sigFsm(char[] sig, char c) {
  if (c==sig[mldpCnt]) {                      // メッセージの次の文字とマッチ？
    mldpCnt = mldpCnt + 1;                    //   ステートを進める
    if (sig[mldpCnt]=='\0') {                 //   全文字がマッチした
      mldpCnt = 0;                            //     次回の使用に備えて
      return true;                            //     マッチした
    }
  } else {                                    // マッチしない
    mldpCnt = 0;                              //   ステートを最初に戻す
  }
  return false;                               // まだマッチしない
}

// RN4020 受信割込み処理ルーチン
char[] mldpSig="MLDP\r\nApp:on\r\n";
char[] errSig="ERR\r\nERR\r\n";

interrupt rn4Rcv()  {
  char c = chr(in(RN4_Data));                 // 受信データを入力する
  if (mldpOn) {                               // 接続中なら
    if (putBuf(rcvBuf, c)) {                  // バッファに書き込めたら
      semV(rcvSem);                           //   プロセスを起こす
    }
    if (sigFsm(errSig, c)) {                  //   切断時によく出るメッセージ？
      mldpOn = false;                         //     切断中に変更
      out(0x2e, in(0x2e)&~1);                 //     RN4020-RAMに記録
    }
  } else {                                    // 切断中なら
    if (sigFsm(mldpSig, c)) {                 //   接続時メッセージ？
      mldpOn = true;                          //     接続中に変更
      out(0x2e, in(0x2e)|1);                  //     RN4020-RAMに記録
    }
  }
}

// SIO 受信割込み処理ルーチン
interrupt sioRcv()  {
  char c = chr(in(SIO_Data));                 // 受信データを入力する
  if (cooked) {                               // cookedモード
    if (c=='\n' || c=='\r') {                 //   改行
      if (putBuf(rcvBuf, c)) {                //     バッファに書き込めたら
        if (echoBack) putSIO("\n", 1);        //       エコーバック
        if (reqLen>0) semV(rcvSem);           //       conRead中はユーザーを起こす
      }
    } else if (0x20<=ord(c) && ord(c)<=0x7e) {//   通常の文字
      if (!putBuf(rcvBuf, c)) {               //     バッファに書き込む。満杯なら
        if (reqLen>0) semV(rcvSem);           //       conReadはユーザーを起こす
        else return;                          //       そうでないときは入力を無視する
      }
      if (echoBack) put(c);                   //     エコーバック
      if (rcvBuf.cnt==reqLen) semV(rcvSem);   //     要求された長さに達したらユーザーを起こす
    } else if (c=='\x08') {                   //   Backspace
      if (unputBuf(rcvBuf) && echoBack) {     //     入力バッファから１文字削除、成功ならエコーバック
        putSIO("\x08 \x08", 3);
      }
    }
  } else {                                    // rawモード
    if (!putBuf(rcvBuf, c)) {                 //   バッファに書き込めなかったら
      if (reqLen>0) semV(rcvSem);             //     conRead中はユーザーを起こす
      else return;                            //     そうでないときは入力を無視する
    }
    if (rcvBuf.cnt==reqLen) semV(rcvSem);     //   要求された長さに達したらユーザーを起こす
  }
}

// 読み込み処理ルーチン
public int getSIO(char[] buf, int len) {
  if (cooked) len = len - 1;                  // '\0'のスペースを確保
  int count=0;

  for (;;) {
    while (count<len) {                       // バッファに入っている文字を読み出す
      int i = getBuf(rcvBuf);
      if (i<0) break;
      buf[count] = chr(i);
      count = count+1;
    }
    if (count==len) break;                    // 要求文字数に達したら終了
    if (cooked) {                             // cooked
      char c = buf[count-1];                  //   末尾の文字
      if (c=='\r' || c=='\n') break;          //   改行なら終了
    }
    reqLen = len - count;
    semP(rcvSem);
  }

  reqLen = -1;                                // reqLenを戻す

  if (cooked) buf[count] = '\0';              // '\0'を末尾に入れる
  return count;                               // 文字数を返す
}

// 初期化
public void sioInit() {
  int[] vect = _ItoA(0xffe0);
  vect[2] = addrof(rn4Rcv);                   // 割込みベクタ初期化
  vect[4] = addrof(sioRcv);                   // 割込みベクタ初期化
  vect[5] = addrof(sioTrs);                   // 割込みベクタ初期化
  in(SIO_Data);                               // 受信バッファのゴミをとる
  in(RN4_Data);                               // 受信バッファのゴミをとる
  out(SIO_Ctrl,0x0040);                       // 受信割込み許可、送信割込み禁止
  out(RN4_Ctrl,0x0040);                       // 受信割込み許可、送信割込み禁止
  trsSem = newSem(0);                         // 送信用セマフォ
  rcvSem = newSem(0);                         // 受信用セマフォ
  mldpOn = (in(0x2e) & 1)!=0;                 // RN4020-RAMから初期値を決める
}

// 入出力の設定を取得
public int getSIOCtl() {
  int ctl = 0;
  if (cooked) ctl = ctl | SIO_COOKED;
  if (echoBack) ctl = ctl | SIO_ECHO;
  return ctl;
}

// 入出力の設定を変更
public void setSIOCtl(int ctl) {
  cooked = (ctl&SIO_COOKED)!=0;
  echoBack = (ctl&SIO_ECHO)!=0;
}
