/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2011-2019 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * tty/tty.cmm : 端末サーバの本体、キーボード入力の受付とディスプレイ表示をする
 *
 * 2019.09.26 : conRead() が getSIO() を呼ぶように変更
 * 2019.06.13 : VGA, PS2を削除; conCtl() を追加
 * 2018.11.30 : ps2 を独立させた
 * 2018.01.27 : インクルードファイルの拡張子を .h から .hmm に変更
 * 2016.01.03 : 中身を sysConRead() に移動し getBuf() を廃止(重村)
 * 2015.09.08 : strcpy() は util.cmm のものを使うように変更(重村)
 * 2015.09.03 : receive() が LINK を返すので getLink() の使用を中止(重村)
 * 2015.06.05 : ウインドウへの出力を排除
 * 2015.06.04 : 村田開発開始、TTY サーバ化、getLBuf を一部変更
 * 2013.01.08 : TaC-CPU V2 対応
 * 2011.05.20 : 新規作成
 *
 * $Id$
 *
 */

#include <util.hmm>
#include <kernel.hmm>
#include <syscall.hmm>

// --------------------------
#include <sio.hmm>
#define getStr(buf, len) getSIO(buf, len)
#define putCh(c) putSIO(c)

#include "tty.hmm"

// -------------------------- conRead システムコール --------------------------

// conRead システムコールの本体 (キーボード入力された文字列をユーザ領域に渡す)
int sysConRead(char[] buf, int len) {
  return getStr(buf, len);                              // 入力
}

// -------------------------- conWrite システムコール -------------------------

// conWrite システムコールの本体 (文字列をディスプレイに表示する)
//   buf はユーザ領域でフォーマット解読済みの文字列となっている
int sysConWrite(void[] buf) {
  char[] str=buf;                                       // 型変換
  for (int i=0; str[i]!='\0'; i=i+1) {
    putCh(str[i]);
  }
  return 0;
}

// ----------------------------- 要求待ち受け部 -------------------------------

// 端末サーバの本体(ここで各システムコールを実行する)
int ttySysCall(int op, int prm1, int prm2) {
  if (op==CONREAD) {
    op = sysConRead(_ItoA(prm1), prm2);                 // conRead(buf, len)
  } else if (op==CONWRITE) {
    op = sysConWrite(_ItoA(prm1));                      // conWrite(buf)
  } else  op= -1;                                       // エラー
  return op;
}

// クライアントとランデブする
public void ttyMain() {
  ttyLink = newLink();                                  // リンクを生成する
  while (true) {                                        // システムコールを待つ
    Link l = receive(ttyLink);                          // システムコールを受信
    int r = ttySysCall(l.op, l.prm1, l.prm2);           // システムコールを指示
    send(ttyLink, r);                                   // 結果を返す
  }
}

//----------------------------------------------------------------------------
// システムコールインターフェイス
//   クライアントプロセスが以下のルーチンを呼出しサーバと IPC する
//----------------------------------------------------------------------------
// conRead システムコール
public int conRead(void[] buf, int len) {
  int r = sndrec(ttyLink, CONREAD, _AtoI(buf), len, 0);
  return r;
}

// conWrite システムコール
public int conWrite(void[] buf) {
  int r = sndrec(ttyLink, CONWRITE, _AtoI(buf), 0, 0);
  return r;
}

// conCtl システムコール
public int conCtl(int request, int argp) {
  if (request==CONCTL_SETMODE) {
    int ctl = 0;
    if (request==TTY_MODE_COOKED) ctl = ctl | SIO_COOKED;
    if (request==TTY_MODE_ECHO) ctl = ctl | SIO_ECHO;
    return 0;
  } else if (request==CONCTL_GETMODE) {
    return getSIOCtl();
  }
  return -1;                                            // 定義されていない操作をした
}
